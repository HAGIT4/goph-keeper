// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: keeper.proto

package goph_keeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/keeper.Auth/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/keeper.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.Auth/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Auth_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keeper.proto",
}

// LoginPassKeeperClient is the client API for LoginPassKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginPassKeeperClient interface {
	SaveLoginPass(ctx context.Context, in *SaveLoginPassRequest, opts ...grpc.CallOption) (*SaveLoginPassResponse, error)
	GetLoginPass(ctx context.Context, in *GetLoginPassRequest, opts ...grpc.CallOption) (*GetLoginPassResponse, error)
	ListLoginPassKeywords(ctx context.Context, in *ListLoginPassKeywordsRequest, opts ...grpc.CallOption) (*ListLoginPassKeywordsResponse, error)
}

type loginPassKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginPassKeeperClient(cc grpc.ClientConnInterface) LoginPassKeeperClient {
	return &loginPassKeeperClient{cc}
}

func (c *loginPassKeeperClient) SaveLoginPass(ctx context.Context, in *SaveLoginPassRequest, opts ...grpc.CallOption) (*SaveLoginPassResponse, error) {
	out := new(SaveLoginPassResponse)
	err := c.cc.Invoke(ctx, "/keeper.LoginPassKeeper/SaveLoginPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginPassKeeperClient) GetLoginPass(ctx context.Context, in *GetLoginPassRequest, opts ...grpc.CallOption) (*GetLoginPassResponse, error) {
	out := new(GetLoginPassResponse)
	err := c.cc.Invoke(ctx, "/keeper.LoginPassKeeper/GetLoginPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginPassKeeperClient) ListLoginPassKeywords(ctx context.Context, in *ListLoginPassKeywordsRequest, opts ...grpc.CallOption) (*ListLoginPassKeywordsResponse, error) {
	out := new(ListLoginPassKeywordsResponse)
	err := c.cc.Invoke(ctx, "/keeper.LoginPassKeeper/ListLoginPassKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginPassKeeperServer is the server API for LoginPassKeeper service.
// All implementations must embed UnimplementedLoginPassKeeperServer
// for forward compatibility
type LoginPassKeeperServer interface {
	SaveLoginPass(context.Context, *SaveLoginPassRequest) (*SaveLoginPassResponse, error)
	GetLoginPass(context.Context, *GetLoginPassRequest) (*GetLoginPassResponse, error)
	ListLoginPassKeywords(context.Context, *ListLoginPassKeywordsRequest) (*ListLoginPassKeywordsResponse, error)
	mustEmbedUnimplementedLoginPassKeeperServer()
}

// UnimplementedLoginPassKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedLoginPassKeeperServer struct {
}

func (UnimplementedLoginPassKeeperServer) SaveLoginPass(context.Context, *SaveLoginPassRequest) (*SaveLoginPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLoginPass not implemented")
}
func (UnimplementedLoginPassKeeperServer) GetLoginPass(context.Context, *GetLoginPassRequest) (*GetLoginPassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginPass not implemented")
}
func (UnimplementedLoginPassKeeperServer) ListLoginPassKeywords(context.Context, *ListLoginPassKeywordsRequest) (*ListLoginPassKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginPassKeywords not implemented")
}
func (UnimplementedLoginPassKeeperServer) mustEmbedUnimplementedLoginPassKeeperServer() {}

// UnsafeLoginPassKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginPassKeeperServer will
// result in compilation errors.
type UnsafeLoginPassKeeperServer interface {
	mustEmbedUnimplementedLoginPassKeeperServer()
}

func RegisterLoginPassKeeperServer(s grpc.ServiceRegistrar, srv LoginPassKeeperServer) {
	s.RegisterService(&LoginPassKeeper_ServiceDesc, srv)
}

func _LoginPassKeeper_SaveLoginPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLoginPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginPassKeeperServer).SaveLoginPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.LoginPassKeeper/SaveLoginPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginPassKeeperServer).SaveLoginPass(ctx, req.(*SaveLoginPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginPassKeeper_GetLoginPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginPassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginPassKeeperServer).GetLoginPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.LoginPassKeeper/GetLoginPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginPassKeeperServer).GetLoginPass(ctx, req.(*GetLoginPassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginPassKeeper_ListLoginPassKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginPassKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginPassKeeperServer).ListLoginPassKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.LoginPassKeeper/ListLoginPassKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginPassKeeperServer).ListLoginPassKeywords(ctx, req.(*ListLoginPassKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginPassKeeper_ServiceDesc is the grpc.ServiceDesc for LoginPassKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginPassKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.LoginPassKeeper",
	HandlerType: (*LoginPassKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLoginPass",
			Handler:    _LoginPassKeeper_SaveLoginPass_Handler,
		},
		{
			MethodName: "GetLoginPass",
			Handler:    _LoginPassKeeper_GetLoginPass_Handler,
		},
		{
			MethodName: "ListLoginPassKeywords",
			Handler:    _LoginPassKeeper_ListLoginPassKeywords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keeper.proto",
}

// TextKeeperClient is the client API for TextKeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextKeeperClient interface {
	SaveText(ctx context.Context, in *SaveTextRequest, opts ...grpc.CallOption) (*SaveTextResponse, error)
	GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResponse, error)
}

type textKeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewTextKeeperClient(cc grpc.ClientConnInterface) TextKeeperClient {
	return &textKeeperClient{cc}
}

func (c *textKeeperClient) SaveText(ctx context.Context, in *SaveTextRequest, opts ...grpc.CallOption) (*SaveTextResponse, error) {
	out := new(SaveTextResponse)
	err := c.cc.Invoke(ctx, "/keeper.TextKeeper/SaveText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textKeeperClient) GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResponse, error) {
	out := new(GetTextResponse)
	err := c.cc.Invoke(ctx, "/keeper.TextKeeper/GetText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextKeeperServer is the server API for TextKeeper service.
// All implementations must embed UnimplementedTextKeeperServer
// for forward compatibility
type TextKeeperServer interface {
	SaveText(context.Context, *SaveTextRequest) (*SaveTextResponse, error)
	GetText(context.Context, *GetTextRequest) (*GetTextResponse, error)
	mustEmbedUnimplementedTextKeeperServer()
}

// UnimplementedTextKeeperServer must be embedded to have forward compatible implementations.
type UnimplementedTextKeeperServer struct {
}

func (UnimplementedTextKeeperServer) SaveText(context.Context, *SaveTextRequest) (*SaveTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveText not implemented")
}
func (UnimplementedTextKeeperServer) GetText(context.Context, *GetTextRequest) (*GetTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedTextKeeperServer) mustEmbedUnimplementedTextKeeperServer() {}

// UnsafeTextKeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextKeeperServer will
// result in compilation errors.
type UnsafeTextKeeperServer interface {
	mustEmbedUnimplementedTextKeeperServer()
}

func RegisterTextKeeperServer(s grpc.ServiceRegistrar, srv TextKeeperServer) {
	s.RegisterService(&TextKeeper_ServiceDesc, srv)
}

func _TextKeeper_SaveText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextKeeperServer).SaveText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.TextKeeper/SaveText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextKeeperServer).SaveText(ctx, req.(*SaveTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextKeeper_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextKeeperServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeper.TextKeeper/GetText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextKeeperServer).GetText(ctx, req.(*GetTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextKeeper_ServiceDesc is the grpc.ServiceDesc for TextKeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextKeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.TextKeeper",
	HandlerType: (*TextKeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveText",
			Handler:    _TextKeeper_SaveText_Handler,
		},
		{
			MethodName: "GetText",
			Handler:    _TextKeeper_GetText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keeper.proto",
}
